// +build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"text/template"

	"github.com/aretext/aretext/syntax/parser"
	"github.com/aretext/aretext/syntax/rules"
	"github.com/pkg/errors"
)

func main() {
	generateTokenizer("JsonTokenizer", rules.JsonRules, "json_tokenizer.go")
	generateTokenizer("GolangTokenizer", rules.GolangRules, "golang_tokenizer.go")
}

func generateTokenizer(tokenizerName string, tokenizerRules []parser.TokenizerRule, outputPath string) {
	fmt.Printf("Generating tokenizer %s to %s\n", tokenizerName, outputPath)

	tokenizer, err := parser.GenerateTokenizer(tokenizerRules)
	if err != nil {
		log.Fatalf("Error generating tokenizer %s: %v\n", tokenizerName, err)
	}

	if err := writeTokenizer(tokenizer, tokenizerName, outputPath); err != nil {
		log.Fatalf("Error writing tokenizer %s to %s: %v\n", tokenizerName, outputPath, err)
	}
}

func writeTokenizer(tokenizer *parser.Tokenizer, tokenizerName string, outputPath string) error {
	f, err := os.Create(outputPath)
	if err != nil {
		return errors.Wrapf(err, "os.Create")
	}
	defer f.Close()

	tmplStr := `// This file is generated by gen_tokenizers.go.  DO NOT EDIT.
package syntax

import "github.com/aretext/aretext/syntax/parser"

{{ define "rule" }}
parser.TokenizerRule{
	Regexp: {{ printf "%q" .Regexp }},
	TokenRole: {{ .TokenRole }},
	SubRules: []parser.TokenizerRule{
		{{ range .SubRules -}}
		{{ template "rule" . }},
		{{ end }}
	},
}{{ end }}

{{ define "tokenizer" }}
&parser.Tokenizer{
	StateMachine: &parser.Dfa{
		NumStates: {{ .StateMachine.NumStates }},
		StartState: {{ .StateMachine.StartState }},
		Transitions: {{ printf "%#v" .StateMachine.Transitions }},
		AcceptActions: {{ printf "%#v" .StateMachine.AcceptActions }},
	},
	SubTokenizers: []*parser.Tokenizer{
		{{ range .SubTokenizers -}}
		{{ if . }}{{ template "tokenizer" . }},{{ else }}nil,{{ end }}
		{{ end }}
	},
	Rules: []parser.TokenizerRule{
		{{ range .Rules }}
		{{ template "rule" . }},
		{{ end }}
	},
}{{ end }}

var {{ .TokenizerName }} *parser.Tokenizer

func init() {
	{{ .TokenizerName }} = {{ template "tokenizer" .Tokenizer }}
}
`

	tmpl, err := template.New("root").Parse(tmplStr)
	if err != nil {
		return errors.Wrapf(err, "template.New")
	}

	return tmpl.Execute(f, map[string]interface{}{
		"TokenizerName": tokenizerName,
		"Tokenizer":     tokenizer,
	})
}
