# This file is generated by gen.go.  DO NOT EDIT.

from __future__ import annotations
from dataclasses import dataclass, asdict
import json
import os
from socket import socket
from typing import Dict
from urllib.parse import urlparse


API_VERSION = "c1b64035ee710af0c85d3cfee7b56d80"


class Client:
    """A client for sending RPCs to the aretext API."""

    def __init__(self, addr: str, api_key: str):
        self._socket = socket()
        self._api_key = api_key
        parsed_addr = urlparse("tcp://{}".format(addr))
        self._socket.connect((parsed_addr.hostname, parsed_addr.port))

    def disconnect(self):
        self._socket.close()

    def set_syntax(self, msg: SetSyntaxMsg) -> OpResultMsg:
        """Set syntax of the current document"""
        self._send("set_syntax", asdict(msg))
        return OpResultMsg(**self._receive())

    def profile_memory(self, msg: ProfileMemoryMsg) -> OpResultMsg:
        """Write a memory profile to the specified file"""
        self._send("profile_memory", asdict(msg))
        return OpResultMsg(**self._receive())

    def quit(self, msg: EmptyMsg) -> OpResultMsg:
        """Quit the aretext editor."""
        self._send("quit", asdict(msg))
        return OpResultMsg(**self._receive())

    def _send(self, endpoint: str, msg: Dict):
        header = {
            "api_version": API_VERSION,
            "api_key": self._api_key,
            "endpoint": endpoint,
        }
        self._send_frame(self._serialize(header))
        self._send_frame(self._serialize(msg))

    def _receive(self) -> Dict:
        header = self._deserialize(self._receive_frame())
        if not header["success"]:
            raise ServerError(header["error"])
        return self._deserialize(self._receive_frame())

    def _send_frame(self, frame_data: str):
        frame_len = len(frame_data).to_bytes(4, byteorder="big")
        self._socket.sendall(frame_len)
        self._socket.sendall(frame_data)

    def _receive_frame(self) -> bytes:
        frame_len = int.from_bytes(self._socket.recv(4), byteorder="big")
        return self._socket.recv(frame_len)

    @staticmethod
    def _serialize(msg: Dict) -> bytes:
        return json.dumps(msg).encode("utf8")

    @staticmethod
    def _deserialize(data: bytes) -> Dict:
        return json.loads(data.decode("utf8"))


_DEFAULT_CLIENT = None


def default_client() -> Client:
    """Return a shared client. """
    global _DEFAULT_CLIENT
    if _DEFAULT_CLIENT is None:
        api_addr = os.environ["API_ADDRESS"]
        api_key = os.environ["API_KEY"]
        _DEFAULT_CLIENT = Client(api_addr, api_key)
    return _DEFAULT_CLIENT


@dataclass
class ServerError(Exception):
    """The server responded with an error."""

    msg: str


@dataclass
class EmptyMsg:
    """
    A message with no fields.

    """

    pass


@dataclass
class SetSyntaxMsg:
    """
    Parameters for setting the syntax of the current document

    Fields:

            language (string): Language of the syntax
    """

    language: str


@dataclass
class ProfileMemoryMsg:
    """
    Parameters for profiling memory

    Fields:

            path (string): Path of the file where the memory profile will be written
    """

    path: str


@dataclass
class OpResultMsg:
    """
    A message describing the result of a memory profile

    Fields:

            success (bool): Whether the operation completed successfully
            description (string): A description of the operation's result
    """

    success: bool = False

    description: str = ""
