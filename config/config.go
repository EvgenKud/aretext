// This file is generated by gen.go.  DO NOT EDIT.
package config

import (
	"fmt"

	"github.com/pkg/errors"
)

// Config is a configuration for the editor.
type Config struct {

	// Language used for syntax highlighting.
	SyntaxLanguage string

	// Size of a tab character in columns.
	TabSize int

	// If enabled, indent a new line to match indentation of the previous line.
	AutoIndent bool
}

const DefaultSyntaxLanguage = "undefined"
const DefaultTabSize = 4
const DefaultAutoIndent = false

// DefaultConfig constructs a configuration with default values.
func DefaultConfig() Config {
	return Config{
		SyntaxLanguage: "undefined",
		TabSize:        4,
		AutoIndent:     false,
	}
}

// Apply overrides config values from fields set on a partial config.
func (c *Config) Apply(o PartialConfig) {

	if o.SyntaxLanguage != nil {
		c.SyntaxLanguage = *o.SyntaxLanguage
	}

	if o.TabSize != nil {
		c.TabSize = *o.TabSize
	}

	if o.AutoIndent != nil {
		c.AutoIndent = *o.AutoIndent
	}

}

// ToPartial converts the config to a partial config.
func (c Config) ToPartial() PartialConfig {
	return PartialConfig{
		SyntaxLanguage: &c.SyntaxLanguage,
		TabSize:        &c.TabSize,
		AutoIndent:     &c.AutoIndent,
	}
}

// PartialConfig is a configuration with a subset of fields.
type PartialConfig struct {
	SyntaxLanguage *string
	TabSize        *int
	AutoIndent     *bool
}

// Validate checks that all fields in the partial config are valid.
func (c PartialConfig) Validate() error {

	if c.SyntaxLanguage != nil {
		valid := StringLenGreaterThan(
			*c.SyntaxLanguage,
			0,
		)
		if !valid {
			msg := fmt.Sprintf("field %s failed validator %s", "SyntaxLanguage", "StringLenGreaterThan(0)")
			return errors.New(msg)
		}
	}

	if c.TabSize != nil {
		valid := IntGreaterThan(
			*c.TabSize,
			0,
		)
		if !valid {
			msg := fmt.Sprintf("field %s failed validator %s", "TabSize", "IntGreaterThan(0)")
			return errors.New(msg)
		}
	}

	return nil
}
